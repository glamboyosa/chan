{"version":3,"sources":["../index.ts","../client.ts"],"sourcesContent":["export * from \"./client\";\n","class Channel<T> {\n  private queue: T[] = [];\n  private resolveQueue: ((value: T | null) => void)[] = [];\n  private closed = false;\n\n  constructor(private bufferSize = 0) {}\n\n  async send(value: T): Promise<void> {\n    if (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift();\n      if (!resolve) {\n        throw new Error(\"Expected an item in the resolveQueue but found none.\");\n      }\n      resolve(value); // Resolve the pending promise with the value\n    } else if (this.queue.length < this.bufferSize) {\n      this.queue.push(value); // Queue the value if the buffer isn't full\n    } else {\n      await new Promise<void>((resolve) => {\n        this.resolveQueue.push(() => resolve()); // Add to the resolve queue\n      });\n      this.queue.push(value); // After promise resolves, queue the value\n    }\n  }\n\n  async receive(): Promise<T | null> {\n    if (this.queue.length > 0) {\n      const val = this.queue.shift();\n      if (!val) {\n        throw new Error(\"Expected an item in the resolveQueue but found none.\");\n      }\n      return val; // Return the next queued value\n    }\n    if (this.closed) {\n      return null; // If channel is closed, return null\n    }\n    return new Promise<T | null>((resolve) => {\n      this.resolveQueue.push(resolve); // Add to the resolve queue\n    });\n  }\n\n  close(): void {\n    this.closed = true;\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift();\n      if (!resolve) {\n        throw new Error(\"Expected an item in the resolveQueue but found none.\");\n      }\n      resolve(null); // Resolve all pending receives with null\n    }\n  }\n}\n\nexport { Channel };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAM,UAAN,MAAiB;AAAA,EAKf,YAAoB,aAAa,GAAG;AAAhB;AAAA,EAAiB;AAAA,EAJ7B,QAAa,CAAC;AAAA,EACd,eAA8C,CAAC;AAAA,EAC/C,SAAS;AAAA,EAIjB,MAAM,KAAK,OAAyB;AAClC,QAAI,KAAK,aAAa,SAAS,GAAG;AAChC,YAAM,UAAU,KAAK,aAAa,MAAM;AACxC,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACxE;AACA,cAAQ,KAAK;AAAA,IACf,WAAW,KAAK,MAAM,SAAS,KAAK,YAAY;AAC9C,WAAK,MAAM,KAAK,KAAK;AAAA,IACvB,OAAO;AACL,YAAM,IAAI,QAAc,CAAC,YAAY;AACnC,aAAK,aAAa,KAAK,MAAM,QAAQ,CAAC;AAAA,MACxC,CAAC;AACD,WAAK,MAAM,KAAK,KAAK;AAAA,IACvB;AAAA,EACF;AAAA,EAEA,MAAM,UAA6B;AACjC,QAAI,KAAK,MAAM,SAAS,GAAG;AACzB,YAAM,MAAM,KAAK,MAAM,MAAM;AAC7B,UAAI,CAAC,KAAK;AACR,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACxE;AACA,aAAO;AAAA,IACT;AACA,QAAI,KAAK,QAAQ;AACf,aAAO;AAAA,IACT;AACA,WAAO,IAAI,QAAkB,CAAC,YAAY;AACxC,WAAK,aAAa,KAAK,OAAO;AAAA,IAChC,CAAC;AAAA,EACH;AAAA,EAEA,QAAc;AACZ,SAAK,SAAS;AACd,WAAO,KAAK,aAAa,SAAS,GAAG;AACnC,YAAM,UAAU,KAAK,aAAa,MAAM;AACxC,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACxE;AACA,cAAQ,IAAI;AAAA,IACd;AAAA,EACF;AACF;","names":[]}